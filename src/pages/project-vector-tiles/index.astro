---
import LayoutApp from '@layouts/LayoutApp.astro'
---

<link rel="stylesheet" href="/css/maplibre-gl.css" />
<script is:raw src="/javascript/maplibre-gl.js"></script>

<script is:raw src="/javascript/map/updateMapButtonsWithLocation.js"></script>

<LayoutApp
  title="Karte aus dem Projekt 'Vector Tiles'"
  noindex={true}
  menuHighlight="project_vector_tiles_map"
>
  <div class="flex h-full gap-5">
    <div id="map" class="w-100 relative h-full flex-1">
      <!-- {% include map/buttons.html %} {% include
    map/vector-tiles/background-buttons.html %} {% include
    map/vector-tiles/sum-by-click.html %} -->
    </div>

    <div
      id="legend"
      class="vh-100 prose-sm prose-blue absolute inset-x-0 bottom-0 z-1000 hidden h-72 overflow-scroll bg-white px-5 shadow-2xl md:static md:block md:h-auto md:w-60 md:overscroll-auto md:px-0 md:shadow-none"
      data-show-hide-target="legend"
    >
    </div>
  </div>
</LayoutApp>

<script is:inline is:raw>
  var map = new maplibregl.Map({
    container: 'map',
    style: 'https://api.maptiler.com/maps/pastel/style.json?key=lh0zCEEmjlKmX91QQEAU',
    zoom: 16,
    center: [13.4381, 52.47928],
    hash: true,
    attributionControl: true,
    customAttribution: 'Parkraumdaten auf OSM-Basis',
  })

  map.addControl(new maplibregl.NavigationControl())

  // ** Layer: Parking Data *****************************************************************
  map.on('load', function () {
    // Add Mapillary sequence layer.
    // https://www.mapillary.com/developer/tiles-documentation/#sequence-layer
    map.addSource('vts_pl_tiles', {
      type: 'vector',
      tiles: ['https://vts.mapwebbing.eu/public.parking_segments/{z}/{x}/{y}.pbf'],
      minzoom: 8,
      maxzoom: 22,
    })

    map.addSource('vts_boundaries_tiles', {
      type: 'vector',
      tiles: ['https://vts.mapwebbing.eu/public.boundaries/{z}/{x}/{y}.pbf'],
      minzoom: 8,
      maxzoom: 22,
    })

    map.addLayer({
      id: 'vts_boundaries',
      source: 'vts_boundaries_tiles',
      'source-layer': 'public.boundaries',
      type: 'line',
      filter: ['all', ['>=', 'admin_level', "'10'"]],
      paint: {
        'line-width': 2,
        'line-color': 'rgba(215, 34, 34, 1)',
      },
    })

    map.addLayer({
      id: 'vts_pl',
      source: 'vts_pl_tiles',
      'source-layer': 'public.parking_segments',
      type: 'line',
      filter: [
        'all',
        [
          'in',
          'orientation',
          'half_on_kerb',
          'marked',
          'mixed',
          'parallel',
          'perpendicular',
          'street_side',
          'yes',
          'diagonal',
        ],
      ],
      paint: { 'line-width': 4, 'line-color': 'rgba(110, 165, 9, 1)' },
    })

    // This is used by the click feature.
    // By default, the whole layer is filtered. "in id <none>"
    // on click we update the filter rule.
    map.addLayer({
      id: 'vts_pl__highlight',
      source: 'vts_pl_tiles',
      'source-layer': 'public.parking_segments',
      type: 'line',
      filter: ['in', 'id', ''],
      paint: { 'line-width': 6, 'line-color': 'rgba(146, 49, 154, 1)' },
    })

    map.addLayer({
      id: 'vts_pl_no',
      source: 'vts_pl_tiles',
      'source-layer': 'public.parking_segments',
      type: 'line',
      filter: ['all', ['in', 'orientation', 'no', 'no_parking', 'no_stopping']],
      paint: { 'line-width': 2, 'line-color': 'rgba(233, 171, 148, 1)' },
    })

    map.addLayer({
      id: 'vts_pl_all_other',
      source: 'vts_pl_tiles',
      'source-layer': 'public.parking_segments',
      type: 'line',
      filter: [
        'all',
        [
          '!in',
          'orientation',
          'no',
          'no_parking',
          'no_stopping',
          'separate',
          'half_on_kerb',
          'marked',
          'mixed',
          'parallel',
          'perpendicular',
          'street_side',
          'yes',
          'diagonal',
        ],
      ],
      paint: { 'line-width': 3, 'line-color': 'rgba(153, 164, 241, 1)' },
    })

    map.addLayer({
      id: 'vts_pl_label',
      source: 'vts_pl_tiles',
      'source-layer': 'public.parking_segments',
      type: 'symbol',
      layout: {
        'text-field': '{capacity}',
        'symbol-placement': 'line-center',
      },
      paint: {
        'text-halo-color': 'rgba(255, 255, 255, 1)',
        'text-halo-width': 1,
      },
    })
  })

  // ** Layer: Additional background layer **************************************************
  map.on('load', () => {
    // Now for a list of background layers
    // Docs .addSource: https://maplibre.org/maplibre-gl-js-docs/api/map/#map#addsource
    //    https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/#raster
    // Docs .addLayer: https://maplibre.org/maplibre-gl-js-docs/api/map/#map#addlayer
    //    https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#raster

    const afterThisLayer = 'vts_boundaries'

    map.addSource('strassenbefahrung_tiles', {
      type: 'raster',
      tiles: ['https://mapproxy.codefor.de/tiles/1.0.0/strassenbefahrung/mercator/{z}/{x}/{y}.png'],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution:
        '<a target="blank" href="https://fbinter.stadt-berlin.de/fb/berlin/service_intern.jsp?id=k_StraDa@senstadt&type=WMS">Geoportal Berlin / Straßenbefahrung 2014</a>',
    })
    map.addLayer(
      {
        id: 'strassenbefahrung',
        type: 'raster',
        source: 'strassenbefahrung_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    map.addSource('alkis_tiles', {
      type: 'raster',
      tiles: ['https://mapproxy.codefor.de/tiles/1.0.0/alkis_30/mercator/{z}/{x}/{y}.png'],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution:
        '<a target="blank" href="https://fbinter.stadt-berlin.de/fb/berlin/service_intern.jsp?id=k_StraDa@senstadt&type=WMS">Geoportal Berlin / Straßenbefahrung 2014</a>',
    })
    map.addLayer(
      {
        id: 'alkis',
        type: 'raster',
        source: 'alkis_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    map.addSource('mapnik_tiles', {
      type: 'raster',
      tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
    })
    map.addLayer(
      {
        id: 'mapnik',
        type: 'raster',
        source: 'mapnik_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    map.addSource('esri_tiles', {
      type: 'raster',
      tiles: [
        'https://clarity.maptiles.arcgis.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
      ],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution: '<a href="https://wiki.openstreetmap.org/wiki/Esri">Terms & Feedback</a>',
    })
    map.addLayer(
      {
        id: 'esri',
        type: 'raster',
        source: 'esri_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    // This is the version from https://github.com/openstreetmap/iD/blob/HEAD/data/manual_imagery.json
    // More: https://github.com/osmlab/editor-layer-index/issues/1451#issuecomment-1057938706
    map.addSource('maxar_tiles', {
      type: 'raster',
      scheme: 'tms', // `{-y}` in Leaflet https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/#raster-scheme
      tiles: [
        'https://services.digitalglobe.com/earthservice/tmsaccess/tms/1.0.0/DigitalGlobe:ImageryTileService@EPSG:3857@jpg/{z}/{x}/{y}.jpg?connectId=c2cbd3f2-003a-46ec-9e46-26a3996d6484',
      ],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution:
        "<a href='https://wiki.openstreetmap.org/wiki/DigitalGlobe'>Terms & Feedback</a>",
    })
    map.addLayer(
      {
        id: 'maxar',
        type: 'raster',
        source: 'maxar_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    map.addSource('areal2021_tiles', {
      type: 'raster',
      tiles: ['https://tiles.codefor.de/berlin-2021-dop20rgbi/{z}/{x}/{y}.png'],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution:
        '<a target="blank" href="https://fbinter.stadt-berlin.de/fb/berlin/service.jsp?id=a_luftbild2021_rgb@senstadt&type=FEED">Geoportal Berlin / Digitale farbige Orthophotos 2021 (DOP20RGBI)</a>',
    })
    map.addLayer(
      {
        id: 'areal2021',
        type: 'raster',
        source: 'areal2021_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    map.addSource('areal2020_tiles', {
      type: 'raster',
      tiles: ['https://tiles.codefor.de/berlin-2020-dop20rgb/{z}/{x}/{y}.png'],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution:
        '<a target="blank" href="https://fbinter.stadt-berlin.de/fb/berlin/service.jsp?id=a_luftbild2020_rgb@senstadt&type=FEED">Geoportal Berlin / Digitale farbige Orthophotos 2020 (DOP20RGB)</a>',
    })
    map.addLayer(
      {
        id: 'areal2020',
        type: 'raster',
        source: 'areal2020_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    map.addSource('areal2019_tiles', {
      type: 'raster',
      tiles: ['https://tiles.codefor.de/berlin-2019-dop20rgb/{z}/{x}/{y}.png'],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution:
        '<a target="blank" href="https://fbinter.stadt-berlin.de/fb/berlin/service.jsp?id=a_luftbild2019_rgb@senstadt&type=FEED">Geoportal Berlin / Digitale farbige Orthophotos 2019 (DOP20RGB)</a>',
    })
    map.addLayer(
      {
        id: 'areal2019',
        type: 'raster',
        source: 'areal2019_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )

    map.addSource('parkraumkarte_neukoelln_tiles', {
      type: 'raster',
      tiles: ['https://tiles.osm-berlin.org/parkraumkarte/{z}/{x}/{y}.jpg'],
      tileSize: 256,
      minzoom: 10,
      maxzoom: 21,
      attribution:
        '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap-Mitwirkende</a>, Bordsteinkanten: OpenStreetMap und Geoportal Berlin / ALKIS.',
    })
    map.addLayer(
      {
        id: 'parkraumkarte_neukoelln',
        type: 'raster',
        source: 'parkraumkarte_neukoelln_tiles',
        layout: { visibility: 'none' },
      },
      afterThisLayer
    )
  })

  // ** Buttons to show/hide the additinal background layer *********************************
  //  https://docs.mapbox.com/mapbox-gl-js/example/toggle-layers/
  //  After the last frame rendered before the map enters an "idle" state.
  map.on('idle', () => {
    // Enumerate ids of the layers.
    const toggleableLayerIds = {
      strassenbefahrung: 'Straßenbefahrung 2014',
      alkis: 'Alkis',
      mapnik: 'OpenStreetMap Carto',
      esri: 'Esri',
      maxar: 'Maxar',
      areal2021: 'Luftbilder 2021',
      areal2020: 'Luftbilder 2020',
      areal2019: 'Luftbilder 2019',
      xhainGutachten: 'Parkraumgutachten Xhain',
      parkraumkarte_neukoelln: 'Parkraumkarte Neukoelln',
    }

    // But we only work with those layers, that where added to the map
    const toggleExistingLayerIds = Object.keys(toggleableLayerIds).filter((layerId) =>
      map.getLayer(layerId)
    )

    // Set up the corresponding toggle button for each layer.
    for (const id of toggleExistingLayerIds) {
      // Skip layers that already have a button set up.
      if (document.getElementById(id)) {
        continue
      }

      // Hide all layer by default:
      map.setLayoutProperty(id, 'visibility', 'none')

      // Add button:
      const classesShared =
        'block px-4 py-2 text-sm text-gray-700 w-full text-left hover:bg-blue-200'
      const classesActive = classesShared + ' bg-gray-100 text-gray-900'
      const classesInactive = classesShared + ' text-gray-700'

      // Create a link.
      const link = document.createElement('button')
      link.id = id
      link.type = 'button'
      link.textContent = toggleableLayerIds[id]
      link.className = classesInactive
      link.role = 'menuitem'
      link.tabindex = '-1'

      // Show or hide layer when the toggle is clicked.
      link.onclick = function (e) {
        const clickedLayer = this.id
        const visibility = map.getLayoutProperty(clickedLayer, 'visibility')

        // Toggle layer visibility by changing the layout object's visibility property.
        // Default is invisible
        if (visibility === 'none') {
          // Hide all layers
          toggleExistingLayerIds.forEach((layerId) => {
            console.log({ layerId, div: document.getElementById(layerId) })
            document.getElementById(layerId).className = classesInactive
            map.setLayoutProperty(layerId, 'visibility', 'none')
          })
          // Show the clicked layer
          this.className = classesActive
          map.setLayoutProperty(clickedLayer, 'visibility', 'visible')
        } else {
          this.className = classesInactive
          map.setLayoutProperty(clickedLayer, 'visibility', 'none')
        }
      }

      const layers = document.getElementById('layer')
      layers.appendChild(link)
    }
  })

  // ** Update Edit Buttons *********************************
  map.on('moveend', () => {
    updateMapButtonsWithLocation(map)
  })
  map.on('idle', () => {
    updateMapButtonsWithLocation(map) // on page load
  })

  // ** OnClick + Sum ***********************************************************************
  map.on('load', () => {
    const layerToIgnore = ['vts_pl_label', 'vts_pl__highlight']

    // When we use `map.queryRenderedFeatures(event.point)` we get all features nearby.
    // This filters then down to what we want to handle.
    // Note: We could refactor this to use the `layer` param, see https://docs.mapbox.com/mapbox-gl-js/api/map/#map#queryrenderedfeatures
    const filterQueriedFeatures = (features) => {
      return features
        .filter((f) => f.source === 'vts_pl_tiles')
        .filter((f) => !layerToIgnore.includes(f.layer.id))
        .map((f) => f.properties)
    }

    let featuresByClickToSum = []

    const vts_pl_layers = map
      .getStyle()
      .layers.filter((l) => l.id.startsWith('vts_pl'))
      .filter((l) => !layerToIgnore.includes(l.id))

    // For all `vts_pl_*` layers…
    vts_pl_layers.forEach((layer) => {
      // … allow clicking to sum data
      map.on('click', layer.id, (event) => {
        const features = map.queryRenderedFeatures(event.point)
        const displayFeatures = filterQueriedFeatures(features)

        // Add or remove features from the list
        // Since one click might hold multiple displayFeatures, this is looped.
        displayFeatures.forEach((f) => {
          const featureAlreadyAdded = featuresByClickToSum.filter((f2) => f2.id === f.id).length > 0

          if (featureAlreadyAdded) {
            featuresByClickToSum = featuresByClickToSum.filter((f2) => f2.id !== f.id)
          } else {
            featuresByClickToSum.push(f)
          }
          map.setFilter('vts_pl__highlight', [
            'in',
            'id',
            ...featuresByClickToSum.filter((f) => !!f.capacity).map((f) => f.id),
          ])
        })

        const div = document.getElementById('sum-by-click')
        let sum = 0
        let html = featuresByClickToSum
          .map((f) => {
            if (!f.capacity) {
              console.log({ MISSING_CAPACITY: f })
              return
            }
            sum += f.capacity
            return `<span title="${JSON.stringify(f)
              .replaceAll('"', '')
              .replaceAll(',', ',\n')}" class="cursor-help">${f.capacity}</span>`
          })
          .filter(Boolean)
          .join('<span class="text-white/80 pl-1 pr-0.5">+</span>')

        html += `<span class="text-white/80 pl-1 pr-1">=</span><span class="font-semibold">${sum}</span>`

        if (featuresByClickToSum.length === 0) {
          html = ''
        }

        div.innerHTML = html
      })

      // … change the cursor
      map.on('mouseenter', layer.id, () => {
        map.getCanvas().style.cursor = 'pointer'
      })
      map.on('mouseleave', layer.id, () => {
        map.getCanvas().style.cursor = ''
      })

      // … show features as table in legend
      map.on('mousemove', layer.id, (event) => {
        const features = map.queryRenderedFeatures(event.point)
        const displayFeatures = filterQueriedFeatures(features)

        // Show legend with table of key-value data
        if (displayFeatures.length) {
          const table = displayFeatures
            .map(
              (line) => `<table class="w-full prose-sm mb-5">
                  <thead>
                    <tr class="bg-gray-100">
                      <th class="text-left py-0.5 pl-0.5">key</th>
                      <th class="text-left py-0.5 pl-1 flex justify-between">
                        <span>value</span>
                        <span class="text-gray-400 font-light">${layer.id}</span></th>
                    </tr>
                  </thead>
                  <tbody>
                    ${Object.entries(line)
                      .map(
                        ([key, value]) => `
                      <tr class="border-b border-gray-200">
                        <td class="break-all w-1/2 p-0"><code>${key}</code></td>
                        <td class="break-all w-1/2 p-0 pl-1">
                          <code>${value}</code>
                          ${
                            key === 'way_id'
                              ? `<a href="https://www.openstreetmap.org/way/${
                                  value.split('.')[0]
                                }" target="_blank" class="underline hover:text-blue-500">OSM</a>`
                              : ''
                          }
                        </td>
                      </tr>
                    `
                      )
                      .join('')}
                  </tbody>
                </table>
                <div class="prose notice my-6 bg-orange-100">👉 <b>Aktueller Hinweis:</b> Das Parkraumschema in OpenStreetMap wird derzeit erneuert. Daher werden derzeit nicht alle verfügbaren Daten angezeigt.<br><br>👉 Diese Projekt ist noch im Aufbau. Die Daten&shy;qualität ist lokal noch sehr unterschiedlich. Bitte beachte unsere <a href='project-vector-tiles/data'>Hinweise zur Datenqualität</a>.</div>
                `
            )
            .join('')
          document.getElementById('legend').innerHTML = table
        }
      })
    })
  })
</script>
