---
import './base.css'

type Props = {
  title: string
  noindex?: boolean | undefined
  canonicalUrl?: string
  language?: 'en' | 'de'
  description?: string
}

const defaults = {
  title: 'Parkraum Projekt — OpenStreetMap Verkehrswende',
  language: 'de',
  description: 'Spezialkarten für Neukölln zum Straßenraum und zur Parkplatzdichte.',
  imagePath: '/images/social-sharing.png',
  imageAlt: 'Daten zu Parkplätzen, berechnet auf Basis von OpenStreetMap Daten.',
}

const { title, noindex, canonicalUrl, language, description, imagePath, imageAlt } = Astro.props
---

<!DOCTYPE html>
<html lang="de" class="h-full scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />

    <slot name="meta" />

    <title>{title}</title>
    {noindex && <meta name="robots" content="noindex" />}
    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}

    <meta property="og:locale" content={language || defaults.language} />
    <meta property="og:title" content={title || defaults.title} />
    <meta property="og:description" content={description || defaults.description} />
    <meta property="og:image" content={imagePath || defaults.imagePath} />
    <!-- We let the Twitter (…) figure out the given URL, so we don't accidentally overwrite params and such  -->
    <!-- <meta property="og:url" content="…"> -->
    <meta name="twitter:title" content={title || defaults.title} />
    <meta name="twitter:description" content={description || defaults.description} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={imagePath || defaults.imagePath} />
    <meta name="twitter:image:alt" content={imageAlt || defaults.imageAlt} />
    <meta name="twitter:site" content="@osmberlin" />

    <meta name="theme-color" content="#7D5197" />
    <meta name="generator" content={Astro.generator} />

    <script is:raw>
      /*
        Toggle 'hidden' to Show/Hide content
        Trigger Element: `data-show-hide-trigger='navi'`
        Target Element: `data-show-hide-target='navi'`
      */
      document.addEventListener('DOMContentLoaded', function () {
        const triggers = document.querySelectorAll('[data-show-hide-trigger]')
        triggers.forEach((trigger) => {
          const triggerTarget = trigger.dataset.showHideTrigger
          const target = document.querySelector(`[data-show-hide-target=${triggerTarget}]`)
          trigger.addEventListener('click', () => {
            target.classList.toggle('hidden')
            // In case we need this later:
            // If we change the map-container size, we also need to tell Leaflet to recalculate the avaliable space for tiles
            // map.invalidateSize()
            // e.preventDefault()
          })
        })
      })

      /*
      Fix .h-screen, see .computed-h-screen
      https://css-tricks.com/the-trick-to-viewport-units-on-mobile/
      */
      // First we get the viewport height and we multiple it by 1% to get a value for a vh unit
      let vh = window.innerHeight * 0.01
      // Then we set the value in the --vh custom property to the root of the document
      document.documentElement.style.setProperty('--vh', `${vh}px`)

      // We listen to the resize event
      window.addEventListener('resize', () => {
        let vh = window.innerHeight * 0.01
        document.documentElement.style.setProperty('--vh', `${vh}px`)
      })
    </script>
  </head>
  <body class="h-full text-base">
    <slot />
  </body>
</html>
